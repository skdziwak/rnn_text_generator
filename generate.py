#
# RNN TEXT GENERATOR v0.1
#
# by Szymon Dziwak
# https://github.com/skdziwak/rnn_text_generator
#

import numpy as np
import json, argparse, random

parser = argparse.ArgumentParser()
parser.add_argument('--info', '-i', dest='info', type=str, action='store', default='info.json', help='Path to info file generated by train.py (default: info.json)')
parser.add_argument('--output', '-o', dest='output', type=str, action='store', default=None, help='Path to output file (default: None, prints output)')
parser.add_argument('--start', '-s', dest='start', type=str, action='store', default=None, help='Start of generated string (default: None, random character)')
parser.add_argument('--length', '-l', dest='length', type=int, action='store', default=512, help='Length of generated text (default: 512)')
parser.add_argument('--temperature', '-t', dest='temperature', type=float, action='store', default=1, help='Temperature (default: 1.0)')
parser.add_argument('--print-output', '-p', dest='print', type=str, action='store', default='true', help='Print output (default: true)')
args, remaining = parser.parse_known_args()

from tensorflow import keras
import tensorflow as tf

for gpu in tf.config.experimental.list_physical_devices('GPU'):
    tf.config.experimental.set_memory_growth(gpu, True)

# Read info generated by train.py
with open(args.info, 'r', encoding='utf-8') as file:
    info = json.loads(file.read())

# Load vocabulary
vocab = info['vocabulary']
vocab_size = len(vocab)

char2id = {c: i for i, c in enumerate(vocab)}
id2char = np.array(vocab)

# Recreate Recurrent Neural Network Model
model = keras.Sequential([
    keras.layers.Embedding(vocab_size, info['embedding_dimension'], batch_input_shape=[1, None]),
    keras.layers.GRU(info['rnn_units'], stateful=True, return_sequences=True, recurrent_initializer='glorot_uniform'),
    keras.layers.Dense(vocab_size)
])

# Load weights form checkpoint directory
model.load_weights(tf.train.latest_checkpoint(info['checkpoints_path']))

# Build model and print neural network's summary
model.build(tf.TensorShape([1, None]))
model.summary()

# Encode user's input string or use random character from vocabulary as a starting string
previous = args.start if args.start else vocab[random.randint(0, vocab_size - 1)]
previous = [char2id[c] for c in previous]

# Reset network states
model.reset_states()

generated_characters = []

for i in range(args.length):
    # Predict next possible character
    predictions = model.predict(np.expand_dims(previous, 0))[0]

    # Divide predictions by temperature to get appropriate level of predictability
    predictions = predictions / args.temperature

    # Use tf.random to get different outcome each time
    predicted_id = tf.random.categorical(predictions, num_samples=1)[-1, 0].numpy()

    previous = [predicted_id]
    generated_characters.append(id2char[predicted_id])

text = ''.join(generated_characters)

if args.output: # If user specifies output the text will be written to a file
    with open(args.output, 'w', encoding='utf-8') as file:
        file.write(text)
if 'true'.startswith(args.print.lower()):
    print(text)

